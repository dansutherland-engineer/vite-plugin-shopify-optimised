{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../src/public/node/api/functions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,iBAAiB,EAAC,MAAM,cAAc,CAAA;AAC9C,OAAO,EAAC,kBAAkB,EAAC,MAAM,qBAAqB,CAAA;AACtD,OAAO,EAAC,iBAAiB,EAAC,MAAM,oBAAoB,CAAA;AAGpD,OAAO,UAAU,MAAM,YAAY,CAAA;AAEnC,sEAAsE;AACtE,yEAAyE;AACzE,iDAAiD;AACjD,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC;IAC7B,OAAO,EAAE,GAAG;IACZ,aAAa,EAAE,EAAE;CAClB,CAAC,CAAA;AAEF;;;;;;;GAOG;AACH,KAAK,UAAU,YAAY,CAAC,KAAa,EAAE,KAAa,EAAE,KAAa;IACrE,MAAM,GAAG,GAAG,WAAW,CAAA;IACvB,MAAM,IAAI,GAAG,MAAM,iBAAiB,EAAE,CAAA;IACtC,MAAM,GAAG,GAAG,WAAW,IAAI,qCAAqC,KAAK,IAAI,KAAK,UAAU,CAAA;IAExF,OAAO;QACL,KAAK;QACL,GAAG;QACH,GAAG;QACH,eAAe,EAAE,EAAC,UAAU,EAAE,kBAAkB,EAAC;KAClD,CAAA;AACH,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,KAAa,EACb,KAA6C,EAC7C,KAAa,EACb,KAAa,EACb,SAAsB;IAEtB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAU,KAAK,IAAI,EAAE;QACxD,OAAO,iBAAiB,CAAsB;YAC5C,GAAG,CAAC,MAAM,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5C,KAAK;YACL,SAAS;SACV,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,OAAO,MAAM,CAAA;AACf,CAAC","sourcesContent":["import {graphqlRequestDoc} from './graphql.js'\nimport {handleDeprecations} from './app-management.js'\nimport {appManagementFqdn} from '../context/fqdn.js'\nimport {TypedDocumentNode} from '@graphql-typed-document-node/core'\nimport {Variables} from 'graphql-request'\nimport Bottleneck from 'bottleneck'\n\n// API Rate limiter for partners API (Limit is 10 requests per second)\n// Jobs are launched every 150ms to add an extra 50ms margin per request.\n// Only 10 requests can be executed concurrently.\nconst limiter = new Bottleneck({\n  minTime: 150,\n  maxConcurrent: 10,\n})\n\n/**\n * Prepares the request configuration for the App Management Functions API.\n *\n * @param orgId - Organization identifier.\n * @param token - Authentication token.\n * @param appId - App identifier.\n * @returns Request configuration object.\n */\nasync function setupRequest(orgId: string, token: string, appId: string) {\n  const api = 'Functions'\n  const fqdn = await appManagementFqdn()\n  const url = `https://${fqdn}/functions/unstable/organizations/${orgId}/${appId}/graphql`\n\n  return {\n    token,\n    api,\n    url,\n    responseOptions: {onResponse: handleDeprecations},\n  }\n}\n\n/**\n * Executes a rate-limited GraphQL request against the App Management Functions API.\n *\n * @param orgId - Organization identifier.\n * @param query - Typed GraphQL document node.\n * @param token - Authentication token.\n * @param appId - App identifier.\n * @param variables - Optional query variables.\n * @returns Promise resolving to the typed query result.\n */\nexport async function functionsRequestDoc<TResult, TVariables extends Variables>(\n  orgId: string,\n  query: TypedDocumentNode<TResult, TVariables>,\n  token: string,\n  appId: string,\n  variables?: TVariables,\n): Promise<TResult> {\n  const result = await limiter.schedule<TResult>(async () => {\n    return graphqlRequestDoc<TResult, TVariables>({\n      ...(await setupRequest(orgId, token, appId)),\n      query,\n      variables,\n    })\n  })\n\n  return result\n}\n"]}