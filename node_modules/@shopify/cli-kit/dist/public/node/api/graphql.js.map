{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../../../../src/public/node/api/graphql.ts"],"names":[],"mappings":"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","sourcesContent":["import {buildHeaders, httpsAgent} from '../../../private/node/api/headers.js'\nimport {debugLogRequestInfo, errorHandler} from '../../../private/node/api/graphql.js'\nimport {addPublicMetadata, runWithTimer} from '../metadata.js'\nimport {retryAwareRequest} from '../../../private/node/api.js'\nimport {requestIdsCollection} from '../../../private/node/request-ids.js'\nimport {\n  GraphQLClient,\n  rawRequest,\n  RequestDocument,\n  resolveRequestDocument,\n  Variables,\n  ClientError,\n} from 'graphql-request'\nimport {TypedDocumentNode} from '@graphql-typed-document-node/core'\n\n// to replace TVariable type when there graphql query has no variables\nexport type Exact<T extends {[key: string]: unknown}> = {[K in keyof T]: T[K]}\n\nexport interface GraphQLVariables {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n}\n\nexport type GraphQLResponse<T> = Awaited<ReturnType<typeof rawRequest<T>>>\n\ninterface GraphQLRequestBaseOptions<TResult> {\n  api: string\n  url: string\n  token?: string\n  addedHeaders?: {[header: string]: string}\n  responseOptions?: GraphQLResponseOptions<TResult>\n}\n\ntype PerformGraphQLRequestOptions<TResult> = GraphQLRequestBaseOptions<TResult> & {\n  queryAsString: string\n  variables?: Variables\n  unauthorizedHandler?: () => Promise<void>\n}\n\nexport type GraphQLRequestOptions<T> = GraphQLRequestBaseOptions<T> & {\n  query: RequestDocument\n  variables?: Variables\n  unauthorizedHandler?: () => Promise<void>\n}\n\nexport type GraphQLRequestDocOptions<TResult, TVariables> = GraphQLRequestBaseOptions<TResult> & {\n  query: TypedDocumentNode<TResult, TVariables> | TypedDocumentNode<TResult, Exact<{[key: string]: never}>>\n  variables?: TVariables\n  unauthorizedHandler?: () => Promise<void>\n}\n\nexport interface GraphQLResponseOptions<T> {\n  handleErrors?: boolean\n  onResponse?: (response: GraphQLResponse<T>) => void\n}\n\n/**\n * Handles execution of a GraphQL query.\n *\n * @param options - GraphQL request options.\n */\nasync function performGraphQLRequest<TResult>(options: PerformGraphQLRequestOptions<TResult>) {\n  const {token, addedHeaders, queryAsString, variables, api, url, responseOptions, unauthorizedHandler} = options\n  const headers = {\n    ...addedHeaders,\n    ...buildHeaders(token),\n  }\n\n  debugLogRequestInfo(api, queryAsString, url, variables, headers)\n  const clientOptions = {agent: await httpsAgent(), headers}\n  const client = new GraphQLClient(url, clientOptions)\n\n  const performRequest = async () => {\n    let fullResponse: GraphQLResponse<TResult>\n    // there is a errorPolicy option which returns rather than throwing on errors, but we _do_ ultimately want to\n    // throw.\n    try {\n      fullResponse = await client.rawRequest<TResult>(queryAsString, variables)\n      await logLastRequestIdFromResponse(fullResponse)\n      return fullResponse\n    } catch (error) {\n      if (error instanceof ClientError) {\n        // error.response does have a headers property like a normal response, but it's not typed as such.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        await logLastRequestIdFromResponse(error.response as any)\n      }\n      throw error\n    }\n  }\n\n  return runWithTimer('cmd_all_timing_network_ms')(async () => {\n    const response = await retryAwareRequest(\n      {request: performRequest, url},\n      responseOptions?.handleErrors === false ? undefined : errorHandler(api),\n      unauthorizedHandler,\n    )\n\n    if (responseOptions?.onResponse) {\n      responseOptions.onResponse(response)\n    }\n\n    return response.data\n  })\n}\n\nasync function logLastRequestIdFromResponse(response: GraphQLResponse<unknown>) {\n  try {\n    const requestId = response.headers.get('x-request-id')\n    requestIdsCollection.addRequestId(requestId)\n    await addPublicMetadata(() => ({\n      cmd_all_last_graphql_request_id: requestId ?? undefined,\n    }))\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch {\n    // no problem if unable to get request ID.\n  }\n}\n\n/**\n * Executes a GraphQL query to an endpoint.\n *\n * @param options - GraphQL request options.\n * @returns The response of the query of generic type <T>.\n */\nexport async function graphqlRequest<T>(options: GraphQLRequestOptions<T>): Promise<T> {\n  return performGraphQLRequest<T>({\n    ...options,\n    queryAsString: options.query as string,\n  })\n}\n\n/**\n * Executes a GraphQL query to an endpoint. Uses typed documents.\n *\n * @param options - GraphQL request options.\n * @returns The response of the query of generic type <TResult>.\n */\nexport async function graphqlRequestDoc<TResult, TVariables extends Variables>(\n  options: GraphQLRequestDocOptions<TResult, TVariables>,\n): Promise<TResult> {\n  return performGraphQLRequest<TResult>({\n    ...options,\n    queryAsString: resolveRequestDocument(options.query).query,\n  })\n}\n"]}