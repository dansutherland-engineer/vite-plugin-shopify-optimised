{"version":3,"file":"cli-launcher.js","sourceRoot":"","sources":["../../../src/public/node/cli-launcher.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,EAAC,MAAM,UAAU,CAAA;AAOtC;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,OAAgB;IAC9C,MAAM,EAAC,YAAY,EAAC,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC,CAAA;IACzD,MAAM,EAAC,aAAa,EAAC,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC,CAAA;IAC1D,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,CAAA;IACzC,MAAM,EAAC,aAAa,EAAC,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC,CAAA;IAEhE,IAAI,aAAa,EAAE,EAAE;QACnB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAA;KACpC;IAED,IAAI;QACF,iEAAiE;QACjE,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,EAAC,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC,CAAC,CAAA;QAC1E,MAAM,MAAM,CAAC,IAAI,EAAE,CAAA;QAEnB,MAAM,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAC7C,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;QAC3B,qDAAqD;KACtD;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,YAAY,CAAC,KAAc,CAAC,CAAA;QAClC,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAc,CAAC,CAAA;KACnD;AACH,CAAC","sourcesContent":["import {fileURLToPath} from 'node:url'\n\ninterface Options {\n  moduleURL: string\n  argv?: string[]\n}\n\n/**\n * Launches the CLI through our custom OCLIF loader.\n *\n * @param options - Options.\n * @returns A promise that resolves when the CLI has been launched.\n */\nexport async function launchCLI(options: Options): Promise<void> {\n  const {errorHandler} = await import('./error-handler.js')\n  const {isDevelopment} = await import('./context/local.js')\n  const oclif = await import('@oclif/core')\n  const {ShopifyConfig} = await import('./custom-oclif-loader.js')\n\n  if (isDevelopment()) {\n    oclif.default.settings.debug = true\n  }\n\n  try {\n    // Use a custom OCLIF config to customize the behavior of the CLI\n    const config = new ShopifyConfig({root: fileURLToPath(options.moduleURL)})\n    await config.load()\n\n    await oclif.default.run(options.argv, config)\n    await oclif.default.flush()\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (error) {\n    await errorHandler(error as Error)\n    return oclif.default.Errors.handle(error as Error)\n  }\n}\n"]}