{"version":3,"file":"DevServer.js","sourceRoot":"","sources":["../../../../../src/public/node/vendor/dev_server/DevServer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,EAAE,MAAM,oBAAoB,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEzC,MAAM,cAAc;IAOlB,MAAM,CAAC,iBAAiB,CAAC,IAAY,EAAE,IAAY,EAAE,IAAY;QAC/D,IAAI;YACF,QAAQ,CAAC,iBAAiB,IAAI,IAAI,IAAI,EAAE,EAAE;gBACxC,OAAO,EAAE,cAAc,CAAC,eAAe;gBACvC,KAAK,EAAE,QAAQ;aAChB,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,IAAI,KAAK,CACb,6BAA6B,IAAI,uBAAuB,IAAI,MAAM,IAAI,cAAc,IAAI,iBAAiB,CAC1G,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,oCAAoC,CAAC,IAAY;QACtD,IAAI;YACF,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;YACtD,IAAI;gBACF,EAAE,CAAC,UAAU,CAAC,2BAA2B,IAAI,uBAAuB,CAAC,CAAC;gBACtE,OAAO,KAAK,CAAC;aACd;YAAC,MAAM;gBACN,OAAO,IAAI,CAAC;aACb;SACF;QAAC,MAAM;YACN,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,QAAgB;QACpC,IAAI;YACF,MAAM,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACxE,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC1C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,MAAM,OAAO,GAAG,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvD,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;oBAC9D,OAAO,OAAO,CAAC,CAAC,CAAE,CAAC,CAAC,wBAAwB;iBAC7C;aACF;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;SACnD;QAED,MAAM,IAAI,KAAK,CAAC,6BAA6B,QAAQ,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,IAAY;QACjC,IAAI;YACF,MAAM,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YAC1D,MAAM,aAAa,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE;gBACzC,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,CAAC;aACb,CAAC,CAAC;YACH,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;SACjD;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CACb,kBAAkB,IAAI,8BAA8B,IAAI,iBAAiB,CAC1E,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,IAAY;QACjC,IAAI;YACF,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CACjC,GAAG,EAAE,CAAC,OAAO,EAAE,wBAAwB,IAAI,cAAc,EACzD,OAAO,CACR,CAAC;YACF,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;SACjD;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CACb,kBAAkB,IAAI,8BAA8B,IAAI,iBAAiB,CAC1E,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,IAAY;QACpC,IAAI,IAAY,CAAC;QACjB,IAAI;YACF,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,2BAA2B,IAAI,UAAU,CAAC,CAAC;SACnE;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,GAAG,GAAG,IAAI,4BAA4B,CAAC;SAC5C;QAED,IAAI;YACF,OAAO,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAC5C;QAAC,MAAM;YACN,OAAO,IAAI,CAAC;SACb;IACH,CAAC;;AA5Fe,sCAAuB,GACrC,yCAAyC,CAAC;AAC5B,2BAAY,GAAG,IAAI,CAAC;AACpB,8BAAe,GAAG,GAAG,CAAC,CAAC,QAAQ;AAC/B,yBAAU,GAAG,YAAY,CAAC;AA2F5C,MAAM,OAAO,SAAS;IAGpB,YAAY,IAAY;QACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;SACnE;QAED,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;SACnE;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,GAAG,CAAC,EACF,qBAAqB,MACiB,EAAE;QACxC,OAAO,WAAW,IAAI,CAAC,IAAI,CAAC,EAAC,qBAAqB,EAAC,CAAC,EAAE,CAAC;IACzD,CAAC;IAED,IAAI,CAAC,EACH,qBAAqB,MACiB,EAAE;QACxC,MAAM,MAAM,GAAG,qBAAqB,IAAI,IAAI,CAAC,IAAI,CAAC;QAElD,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE;YAC5B,MAAM,QAAQ,GAAG,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC;iBAC3C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAEnD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzB,MAAM,IAAI,KAAK,CACb,kBAAkB,IAAI,CAAC,IAAI,wCAAwC,CACpE,CAAC;aACH;YAED,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,QAAQ,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAC;YAClE,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC3C,MAAM,UAAU,GAAG,YAAY,KAAK,WAAW,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YAEzE,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;SAC7D;aAAM,IAAI,cAAc,CAAC,oCAAoC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACzE,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,OAAO,GAAG,MAAM,eAAe,CAAC;SACjC;aAAM;YACL,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,OAAO,GAAG,MAAM,WAAW,CAAC;SAC7B;IACH,CAAC;IAES,wBAAwB;QAChC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/D,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;IAES,wBAAwB;QAChC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/D,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;CACF;AAED,MAAM,OAAO,aAAa;IAA1B;QACmB,SAAI,GAAG,SAAS,CAAC;IAoCpC,CAAC;IAlCC,GAAG,CAAC,MAAc;QAChB,OAAO,WAAW,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;IACxC,CAAC;IAED,IAAI,CAAC,MAAc;QACjB,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE;YAC5B,MAAM,eAAe,GAAG,EAAE;iBACvB,WAAW,CAAC,aAAa,CAAC;iBAC1B,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,eAAe,EAAE;gBACpB,MAAM,IAAI,KAAK,CACb,kBAAkB,IAAI,CAAC,IAAI,wCAAwC,CACpE,CAAC;aACH;YACD,yDAAyD;YACzD,OAAO,GAAG,MAAM,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;SAC1D;aAAM,IAAI,cAAc,CAAC,oCAAoC,CAAC,SAAS,CAAC,EAAE;YACzE,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,OAAO,GAAG,MAAM,eAAe,CAAC;SACjC;aAAM;YACL,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,OAAO,GAAG,MAAM,cAAc,CAAC;SAChC;IACH,CAAC;IAEO,wBAAwB;QAC9B,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,cAAc,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC/D,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;IAEO,wBAAwB;QAC9B,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,cAAc,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC/D,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;CACF","sourcesContent":["import fs from 'fs';\nimport * as os from 'os';\nimport * as ni from 'network-interfaces';\nimport { execSync } from 'child_process';\n\nclass DevServerUtils {\n  static readonly INFERENCE_MODE_SENTINEL =\n    '/opt/dev/misc/dev-server-inference-mode';\n  static readonly BACKEND_PORT = 8080;\n  static readonly CONNECT_TIMEOUT = 100; // 100ms\n  static readonly HOSTS_FILE = '/etc/hosts';\n\n  static assertConnectable(name: string, addr: string, port: number): void {\n    try {\n      execSync(`nc -z -v -w 1 ${addr} ${port}`, {\n        timeout: DevServerUtils.CONNECT_TIMEOUT,\n        stdio: 'ignore',\n      });\n    } catch (err) {\n      throw new Error(\n        `NET FAILED DevServer for '${name}' is not running on ${port} / ${addr}: \\`dev up ${name}\\` to start it.`\n      );\n    }\n  }\n\n  static inferenceModeAndProjectIsEdition2016(name: string): boolean {\n    try {\n      fs.accessSync(DevServerUtils.INFERENCE_MODE_SENTINEL);\n      try {\n        fs.accessSync(`/opt/nginx/etc/manifest/${name}/current/edition-2024`);\n        return false;\n      } catch {\n        return true;\n      }\n    } catch {\n      return false;\n    }\n  }\n\n  static getIpFromHosts(hostname: string): string {\n    try {\n      const hostsContent = fs.readFileSync(DevServerUtils.HOSTS_FILE, 'utf8');\n      const lines = hostsContent.split(/\\r?\\n/);\n      for (const line of lines) {\n        const matches = /^\\s*?([^#]+?)\\s+([^#]+?)$/.exec(line);\n        if (matches && matches.length === 3 && matches[2] === hostname) {\n          return matches[1]!; // Return the IP address\n        }\n      }\n    } catch (error) {\n      console.error('Error reading hosts file:', error);\n    }\n\n    throw new Error(`No IP found for hostname: ${hostname}`);\n  }\n\n  static getAddrPort2024(name: string): [string, number] {\n    try {\n      const backendIp = DevServerUtils.resolveBackendHost(name);\n      const interfaceName = ni.fromIp(backendIp, {\n        internal: true,\n        ipVersion: 4,\n      });\n      return [backendIp, DevServerUtils.BACKEND_PORT];\n    } catch (error) {\n      throw new Error(\n        `DevServer for '${name}' is not running: \\`dev up ${name}\\` to start it.`\n      );\n    }\n  }\n\n  static getAddrPort2016(name: string): [string, number] {\n    try {\n      const portContent = fs.readFileSync(\n        `${os.homedir()}/.local/run/services/${name}/server/port`,\n        'utf-8'\n      );\n      return ['localhost', parseInt(portContent, 10)];\n    } catch (error) {\n      throw new Error(\n        `DevServer for '${name}' is not running: \\`dev up ${name}\\` to start it.`\n      );\n    }\n  }\n\n  static resolveBackendHost(name: string): string {\n    let host: string;\n    try {\n      host = fs.readlinkSync(`/opt/nginx/etc/manifest/${name}/current`);\n    } catch (error) {\n      host = `${name}.root.shopify.dev.internal`;\n    }\n\n    try {\n      return DevServerUtils.getIpFromHosts(host);\n    } catch {\n      return host;\n    }\n  }\n}\n\nexport class DevServer {\n  protected name: string;\n\n  constructor(name: string) {\n    if (!process.env.SPIN && !process.env.USING_DEV) {\n      throw new Error('DevServer is not supported in this environment');\n    }\n\n    if (name === 'shopify') {\n      throw new Error('Use DevServer.core for the \\'shopify\\' project');\n    }\n    this.name = name;\n  }\n\n  url({\n    nonstandardHostPrefix,\n  }: { nonstandardHostPrefix?: string } = {}): string {\n    return `https://${this.host({nonstandardHostPrefix})}`;\n  }\n\n  host({\n    nonstandardHostPrefix,\n  }: { nonstandardHostPrefix?: string } = {}): string {\n    const prefix = nonstandardHostPrefix || this.name;\n\n    if (process.env.SPIN === '1') {\n      const services = fs.readdirSync('/run/ports2')\n        .filter(file => file.endsWith(`--${this.name}`));\n\n      if (services.length === 0) {\n        throw new Error(\n          `DevServer for '${this.name}' not present in this spin environment`\n        );\n      }\n\n      const match = new RegExp(`^(.+)${this.name}$`).exec(services[0]!);\n      const organization = match ? match[1] : '';\n      const spinPrefix = organization !== 'shopify--' ? `${organization}` : '';\n\n      return `${spinPrefix}${this.name}.${process.env.SPIN_FQDN}`;\n    } else if (DevServerUtils.inferenceModeAndProjectIsEdition2016(this.name)) {\n      this.assertRunningLocally2016();\n      return `${prefix}.myshopify.io`;\n    } else {\n      this.assertRunningLocally2024();\n      return `${prefix}.shop.dev`;\n    }\n  }\n\n  protected assertRunningLocally2024(): void {\n    const [addr, port] = DevServerUtils.getAddrPort2024(this.name);\n    DevServerUtils.assertConnectable(this.name, addr, port);\n  }\n\n  protected assertRunningLocally2016(): void {\n    const [addr, port] = DevServerUtils.getAddrPort2016(this.name);\n    DevServerUtils.assertConnectable(this.name, addr, port);\n  }\n}\n\nexport class DevServerCore {\n  private readonly name = 'shopify';\n\n  url(prefix: string): string {\n    return `https://${this.host(prefix)}`;\n  }\n\n  host(prefix: string): string {\n    if (process.env.SPIN === '1') {\n      const projectPortRoot = fs\n        .readdirSync('/run/ports2')\n        .find((file) => file.endsWith(`--${this.name}`));\n      if (!projectPortRoot) {\n        throw new Error(\n          `DevServer for '${this.name}' not present in this spin environment`\n        );\n      }\n      // Spin mostly doesn't do alternative hostname prefixing.\n      return `${prefix}.${this.name}.${process.env.SPIN_FQDN}`;\n    } else if (DevServerUtils.inferenceModeAndProjectIsEdition2016('shopify')) {\n      this.assertRunningLocally2016();\n      return `${prefix}.myshopify.io`;\n    } else {\n      this.assertRunningLocally2024();\n      return `${prefix}.my.shop.dev`;\n    }\n  }\n\n  private assertRunningLocally2024(): void {\n    const [addr, port] = DevServerUtils.getAddrPort2024('shopify');\n    DevServerUtils.assertConnectable('shopify', addr, port);\n  }\n\n  private assertRunningLocally2016(): void {\n    const [addr, port] = DevServerUtils.getAddrPort2016('shopify');\n    DevServerUtils.assertConnectable('shopify', addr, port);\n  }\n}"]}